{"version":3,"sources":["logo.svg","components/Card/index.js","components/Header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","onClick","trackCounter","id","alt","name","src","image","Header","children","currentScore","highScore","Wrapper","App","state","cards","endGame","setState","console","log","this","forEach","card","count","alert","find","i","j","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wgEAAAA,EAAOC,QAAU,IAA0B,kC,qICW5BC,G,MARF,SAAAC,GAAK,OACd,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,MAC1D,yBAAKH,UAAU,mBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCO9BC,G,MAVA,SAAAT,GAAK,OAEhB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,cAAcD,EAAMU,UACnC,yBAAKT,UAAU,iBAAf,kBACoBD,EAAMW,aAD1B,gBACqDX,EAAMY,cCApDC,G,MALC,SAAAb,GAAK,OACrB,yBAAKC,UAAU,WACVD,EAAMU,Y,OCwDII,G,uNAnDbC,MAAQ,CACNC,QACAL,aAAc,EACdC,UAAW,G,EAGbK,QAAU,WAYR,OAVI,EAAKF,MAAMJ,aAAe,EAAKI,MAAMH,WACvC,EAAKM,SAAS,CAAEN,UAAW,EAAKG,MAAMJ,eAAgB,WACpDQ,QAAQC,IAAIC,KAAKN,MAAMH,cAI3B,EAAKG,MAAMC,MAAMM,SAAQ,SAAAC,GAAUA,EAAKC,MAAQ,KAEhDC,MAAM,2BAAD,OAA4B,EAAKV,MAAMJ,eAC5C,EAAKO,SAAS,CAAEP,aAAc,KACvB,G,EAGTR,aAAe,SAAAC,GACb,EAAKW,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GAExB,GAAID,EAAEvB,KAAOA,EAAI,CACf,GAAuB,IAAnBY,EAAMY,GAAGJ,MAMX,OALAR,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAO,EACjC,EAAKN,SAAS,CAAEP,aAAc,EAAKI,MAAMJ,aAAe,IAAK,WAC3DQ,QAAQC,IAAIC,KAAKN,MAAMJ,iBAEzB,EAAKI,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAGP,EAAKd,e,wEAMH,IAAD,OACL,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQN,aAAcU,KAAKN,MAAMJ,aAAcC,UAAaS,KAAKN,MAAMH,WAAvE,sBACCS,KAAKN,MAAMC,MAAMgB,KAAI,SAAAT,GAAI,OACxB,kBAAC,EAAD,CAAMpB,aAAgB,EAAKA,aAAcC,GAAMmB,EAAKnB,GAAI6B,IAAOV,EAAKnB,GAAII,MAASe,EAAKf,gB,GA/ChF0B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1b915f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport './Card.css'\r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.trackCounter(props.id)}>\r\n        <div className=\"image-container\">\r\n            <img alt={props.name} src={props.image}/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n\r\n    <div className=\"header\">\r\n        <div className=\"title-card\">{props.children}</div>\r\n        <div className=\"score-tracker\">\r\n            Current-Score: {props.currentScore} High-Score: {props.highScore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props =>\r\n<div className=\"wrapper\">\r\n    {props.children}\r\n</div>\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Card from './components/Card';\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./memorycards.json\"\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    cards,\n    currentScore: 0,\n    highScore: 0\n  };\n\n  endGame = () => {\n\n    if (this.state.currentScore > this.state.highScore) {\n      this.setState({ highScore: this.state.currentScore }, function () {\n        console.log(this.state.highScore);\n      });\n    }\n\n    this.state.cards.forEach(card => { card.count = 0; });\n\n    alert(`End Game \\n Your Score: ${this.state.currentScore}`);\n    this.setState({ currentScore: 0 });\n    return true;\n  }\n\n  trackCounter = id => {\n    this.state.cards.find((i, j) => {\n\n      if (i.id === id) {\n        if (cards[j].count === 0) {\n          cards[j].count = cards[j].count +1 ;\n          this.setState({ currentScore: this.state.currentScore + 1 }, function () {\n            console.log(this.state.currentScore);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true;\n        }\n        else {\n          this.endGame();\n        }\n      }\n    });\n  }\n\n  render() {\n      return (\n        <Wrapper>\n          <Header currentScore={this.state.currentScore} highScore = {this.state.highScore}>Naruto Memory Game</Header>\n          {this.state.cards.map(card => (\n            <Card trackCounter = {this.trackCounter} id = {card.id} key = {card.id} image = {card.image} />\n          ))}\n        </Wrapper>\n      )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}